(()=>{"use strict";class t{constructor(t){this._url=t}async getPhotographers(){return fetch(this._url).then((t=>t.json())).then((t=>t.photographers)).catch((t=>console.log("La requete api getPhotographer a échoué : ",t)))}async getPhotographerById(t){try{const e=await fetch(this._url);return(await e.json()).photographers.filter((e=>e.id===t))[0]}catch(t){return console.log("La requete api getPhotographerById a échoué : ",t),null}}async getPortfolioByUserId(t){return fetch(this._url).then((t=>t.json())).then((e=>e.media.filter((e=>e.photographerId===t)))).catch((t=>console.log("La requete api getPortfolioById a échoué : ",t)))}}class e{constructor(t){this._id=t.id,this._photographerId=t.photographerId,this._title=t.title,this._likes=t.likes,this._date=t.date,this._price=t.price,this._description=t.description,this._globalLikes=297081}get id(){return this._id}get photographeId(){return this._photographeId}get title(){return this._title}get likes(){return this._likes}get date(){return this._date}get price(){return this._price}get description(){return this._description}get globalLikes(){return this._globalLikes}}class r extends e{constructor(t){super(t),this._type="image",this._image=t.image,this._imagePath=`assets/images/${t.photographerId}/${this._image}`,this._format="img",this._icon="fa-magnifying-glass"}get path(){return this._imagePath}get image(){return this._image}get type(){return this._type}get icon(){return this._icon}get format(){return this._format}}class a extends e{constructor(t){super(t),this._type="video",this._video=t.video,this._videoPath=`assets/images/${t.photographerId}/${this._video}`,this._format="video",this._icon="fa-circle-play"}get path(){return this._videoPath}get video(){return this._video}get type(){return this._type}get icon(){return this._icon}get format(){return this._format}}class i{constructor(t){if(t.image)return new r(t);if(t.video)return new a(t);throw"Unknown format type"}}class s{constructor(t){this._name=t.name,this._id=t.id,this._city=t.city,this._country=t.country,this._tagline=t.tagline,this._price=t.price,this._portrait=t.portrait,this._portfolio=[],this._cardPhotographer=null,this._cardPortfolio=null,this._cardModal=null}get name(){return this._name}get id(){return this._id}get city(){return this._city}get country(){return this._country}get tagline(){return this._tagline}get price(){return this._price}get portrait(){return`/assets/photographers/${this._portrait}`}get cardPhotographer(){return this._cardPhotographer}get cardPortfolio(){return this._cardPortfolio}get cardModal(){return this._cardModal}get portfolio(){return this._portfolio}get cardPhotographer(){return this._cardPhotographer}get cardPortfolio(){return this._cardPortfolio}set portfolio(t){this._portfolio=t}set cardPhotographer(t){this._templatePhotographer=t}set cardPortfolio(t){this._cardPortfolio=t}}class o{constructor(t){this._photographer=t,this._wrapperHeader=document.createElement("div"),this._wrapperHeader.classList.add("media-card-wrapper"),this._wrapperContact=document.createElement("div"),this._wrapperContact.classList.add("contact-card-wrapper")}get photographer(){return this._photographer}createMediaCardHeader(){const t=`\n    <div class="info-section">\n      <h1>${this._photographer.name}</h1>\n      <p class="local-header">${this._photographer.city}, ${this._photographer.country}</p>\n      <p class="tagline-header">${this._photographer.tagline}</p>\n    </div>\n    <div class="button-section">\n      <button class="contact_button" aria-label="contact me">Contactez-moi</button>\n    </div>\n    <div class="image-header-section">\n      <img class="img-header" src="${this._photographer.portrait}" alt="${this._photographer.name}">\n    </div>`;return this._wrapperHeader.innerHTML=t,this._wrapperHeader}createContactCard(){const t=`\n    <div class="modal">\n    <header>\n      <h2 class="modal-title">Contactez-moi ${this._photographer.name}</h2>\n      <img src="../assets/icons/close.svg" class="btnClose" alt="Close"/>\n    </header>\n    <form>\n      <div>\n        <label for="firstname" type="text">Prénom</label>\n        <input type="text" id="firstname" name="firstname" class='input-recup'/>\n      </div>\n      <div>\n        <label for="lastname" type="text">Nom</label>\n        <input type="text" id="lastname" name="lastname" class='input-recup'/>\n      </div>\n      <div>\n        <label for="email" type="email">Email</label>\n        <input type="email" id="email" name="email" class='input-recup'/>\n      </div>\n      <div>\n        <label for="text" type="text">Votre message</label>\n        <input type="text" id="text" name="text" class='input-recup'/>\n      </div>\n      <a href="#">\n        <input type="button" value="Envoyer" id="send" class="send_button">\n      </a>\n    </form>\n  </div>\n    \n    `;return this._wrapperContact.innerHTML=t,this._wrapperContact}}class n{constructor(t){this._media=t,this.$wrapperCard=null,this.$wrapperSticky=null}get mediaHtmlElement(){return this.$wrapperCard}createCardMedia(t){this.$wrapperCard=document.createElement("div"),this.$wrapperCard.classList.add("media-card"),this.$wrapperCard.classList.add(`media-card--${this._media.type}`);const e=`         \n      <a href="${this._media.path}" class="media-card-cover" aria-label="${this._media.description}, agrandir l'image">          \n        <${this._media.format} src="${this._media.path}" alt="${this._media.description}, ${this._media.type}"/>\n      </a> \n      <div class="media-card-content">\n        <h2 class="media-card-content-title" tabindex="0">${this._media.title}</h2>\n        <div class="media-card-content-like favorite">\n          <label id="like-${this._media.id}" for="like-${this._media.id}-input" class="favorite-counter">${this._media.likes} </label>\n          <span><i class="fa fa-solid fa-heart fa-sm" arial-label="likes"></i></span>\n          <input id="like-${this._media.id}-input" aria-label="${this._media.likes} j'aimes" class="favorite-input" type="checkbox"/>\n        </div>\n      </div>\n    `;return this.$wrapperCard.innerHTML=e,this.$wrapperCard}}class h{constructor(t){this._photographer=t,this._wrapper=document.createElement("div"),this._wrapper.classList.add("photographer-card-wrapper")}get photographer(){return this._photographer}createPhotographerCard(){const t=`\n      <article>\n        <a href="photographer.html?id=${this._photographer.id}" id="${this._photographer.id}" class="link" alt="page de ${this._photographer.name}">\n          <img src="${this._photographer.portrait}" alt="${this._photographer.name}" class="image">\n          <h2>${this._photographer.name}</h2>\n        <p class="location">${this._photographer.city}, ${this._photographer.country}</p>\n        <p class="slogan">${this._photographer.tagline}</p>\n        <p class="price">${this._photographer.price}€/jour</p>\n        </a>  \n      </article>\n      `;return this._wrapper.innerHTML=t,this._wrapper}}class c{constructor(t,e){this._photographer=t,this._media=e}get photographer(){return this._photographer}get media(){return this._media}createCardSticky(t,e){this.$wrapperSticky=document.createElement("div"),this.$wrapperSticky.classList.add("sticky-card");const r=`\n    <span class="globalLikes">${this._media.globalLikes}</span>\n    <span><i class="fa fa-solid fa-heart fa-sm" arial-label="likes"></i></span>\n    <span class="price">${this._photographer.price}€ / jour</span>\n    `;return this.$wrapperSticky.innerHTML=r,this.$wrapperSticky}}!async function(){const r=document.querySelector(".photographer_wrapper"),a=document.querySelector(".profil"),p=document.querySelector(".contact_modal"),d=document.querySelector(".portfolio"),l=document.querySelector(".sticky");if(r){const e=new t("../data/photographers.json"),a=await e.getPhotographers(),i=[];a.forEach((t=>{const e=new s(t);i.push(e)})),i.forEach((t=>{const e=new h(t);r.appendChild(e.createPhotographerCard())}))}else{const r=new t("../data/photographers.json"),h=window.location.search,u=new URLSearchParams(h),g=parseInt(u.get("id")),m=await r.getPhotographerById(g),_=(await r.getPortfolioByUserId(g)).map((t=>new i(t))),y=new s(m);y.headerMediaCard=new o(y),a.appendChild(y.headerMediaCard.createMediaCardHeader());const f=new e(_);_.forEach((t=>{const e=new n(t);d.appendChild(e.createCardMedia())})),p.appendChild(y.headerMediaCard.createContactCard());const w=document.querySelector(".body"),v=document.querySelector(".contact_button"),$=document.querySelector(".media_wrapper"),b=document.querySelector(".contact_modal"),C=document.querySelector(".btnClose"),k=document.querySelector("#firstname"),P=()=>{$.setAttribute("aria-hidden","true"),$.style.display="none",b.setAttribute("aria-hidden","false"),w.classList.add("no-scroll"),b.style.display="block",k.focus()},L=()=>{$.setAttribute("aria-hidden","false"),$.style.display="block",b.setAttribute("aria-hidden","true"),w.classList.remove("no-scroll"),b.style.display="none",v.focus()};v.addEventListener("click",P),C.addEventListener("click",L),document.addEventListener("keydown",(t=>{const e=t.keyCode;"false"==b.getAttribute("aria-hidden")&&27===e&&L()}));const S=document.querySelector("#send"),q=document.querySelectorAll(".input-recup");S.addEventListener("click",(t=>{t.preventDefault,q.forEach((t=>{console.log(t.value)}))}));const E=new c(y,f);l.appendChild(E.createCardSticky())}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,